!function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={exports:{},id:r,loaded:!1};return t[r].call(o.exports,o,o.exports,e),o.loaded=!0,o.exports}var n={};return e.m=t,e.c=n,e.p="",e(0)}([function(t,e,n){t.exports=n(1)},function(t,e,n){(function(t){"use strict";n(4),n(6),t.mount("*")}).call(e,n(2))},function(t,e,n){var r;!function(o,i){"use strict";function a(t,e,n){var r={};return r[t.key]=e,t.pos&&(r[t.pos]=n),r}function u(t,e){for(var n,r=e.length,o=t.length;r>o;)n=e[--r],e.splice(r,1),n.unmount()}function s(t,e){Object.keys(t.tags).forEach(function(n){var r=t.tags[n];D(r)?b(r,function(t){R(t,n,e)}):R(r,n,e)})}function c(t,e,n){var r,o=t._root;for(t._virts=[];o;)r=o.nextSibling,n?e.insertBefore(o,n._root):e.appendChild(o),t._virts.push(o),o=r}function f(t,e,n,r){for(var o,i=t._root,a=0;a<r;a++)o=i.nextSibling,e.insertBefore(i,n._root),i=o}function l(t,e,n){C(t,"each");var r,o=typeof T(t,"no-reorder")!==it||C(t,"no-reorder"),i=$(t),l=tt[i]||{tmpl:x(t)},p=ct.test(i),d=t.parentNode,g=document.createTextNode(""),m=E(t),v="option"===i.toLowerCase(),b=[],y=[],w="VIRTUAL"==t.tagName;n=gt.loopKeys(n),d.insertBefore(g,t),e.one("before-mount",function(){t.parentNode.removeChild(t),d.stub&&(d=e.root)}).on("update",function(){var x=gt(n.val,e),_=document.createDocumentFragment();D(x)||(r=x||!1,x=r?Object.keys(x).map(function(t){return a(n,t,x[t])}):[]);for(var N=0,C=x.length;N<C;N++){var L=x[N],T=o&&typeof L==at&&!r,O=y.indexOf(L),E=~O&&T?O:N,M=b[E];L=!r&&n.key?a(n,L,N):L,!T&&!M||T&&!~O||!M?(M=new h(l,{parent:e,isLoop:!0,hasImpl:!!tt[i],root:p?d:t.cloneNode(),item:L},t.innerHTML),M.mount(),w&&(M._root=M.root.firstChild),N!=b.length&&b[N]?(w?c(M,d,b[N]):d.insertBefore(M.root,b[N].root),y.splice(N,0,L)):w?c(M,_):_.appendChild(M.root),b.splice(N,0,M),E=N):M.update(L,!0),E!==N&&T&&b[N]&&(w?f(M,d,b[N],t.childNodes.length):d.insertBefore(M.root,b[N].root),n.pos&&(M[n.pos]=N),b.splice(N,0,b.splice(E,1)[0]),y.splice(N,0,y.splice(E,1)[0]),!m&&M.tags&&s(M,N)),M._item=L,A(M,"_parent",e)}if(u(x,b),d.insertBefore(_,g),v&&dt&&!d.multiple)for(var R=0;R<d.length;R++)if(d[R].__riot1374){d.selectedIndex=R,delete d[R].__riot1374;break}m&&(e.tags[i]=b),y=x.slice()})}function p(t,e,n,r){P(t,function(t){if(1==t.nodeType){if(t.isLoop=t.isLoop||t.parentNode&&t.parentNode.isLoop||T(t,"each")?1:0,n){var o=E(t);o&&!t.isLoop&&n.push(S(o,{root:t,parent:e},t.innerHTML,e))}t.isLoop&&!r||Z(t,e,[])}})}function d(t,e,n){function r(t,e,r){gt.hasExpr(e)&&n.push(j({dom:t,expr:e},r))}P(t,function(t){var n,o=t.nodeType;if(3==o&&"STYLE"!=t.parentNode.tagName&&r(t,t.nodeValue),1==o)return(n=T(t,"each"))?(l(t,e,n),!1):(b(t.attributes,function(e){var n=e.name,o=n.split("__")[1];if(r(t,e.value,{attr:o||n,bool:o}),o)return C(t,n),!1}),!E(t)&&void 0)})}function h(t,e,n){function r(){var t=m&&g?f:h||f;b(T.attributes,function(e){var n=e.value;l[L(e.name)]=gt.hasExpr(n)?gt(n,t):n}),b(Object.keys(M),function(e){l[L(e)]=gt(M[e],t)})}function o(t){for(var e in x)typeof f[e]!==ut&&H(f,e)&&(f[e]=t[e])}function a(){f.parent&&g&&b(Object.keys(f.parent),function(t){var e=!ft.test(t)&&I(R,t);(typeof f[t]===ut||e)&&(e||R.push(t),f[t]=f.parent[t])})}function u(t){f.update(t,!0)}function s(t){if(b(_,function(e){e[t?"mount":"unmount"]()}),h){var e=t?"on":"off";g?h[e]("unmount",f.unmount):h[e]("update",u)[e]("unmount",f.unmount)}}var c,f=Y.observable(this),l=G(e.opts)||{},h=e.parent,g=e.isLoop,m=e.hasImpl,x=F(e.item),w=[],_=[],T=e.root,E=T.tagName.toLowerCase(),M={},R=[];t.name&&T._tag&&T._tag.unmount(!0),this.isMounted=!1,T.isLoop=g,T._tag=this,A(this,"_riot_id",++J),j(this,{parent:h,root:T,opts:l},x),A(this,"tags",{}),b(T.attributes,function(t){var e=t.value;gt.hasExpr(e)&&(M[t.name]=e)}),c=mt(t.tmpl,n),A(this,"update",function(t,e){return t=F(t),a(),t&&N(x)&&(o(t),x=t),j(f,t),r(),f.trigger("update",t),v(w,f),e&&f.parent?f.parent.one("updated",function(){f.trigger("updated")}):bt(function(){f.trigger("updated")}),this}),A(this,"mixin",function(){return b(arguments,function(t){var e,n,r=[];t=typeof t===it?Y.mixin(t):t,e=y(t)?new t:t;do r=r.concat(Object.getOwnPropertyNames(n||e));while(n=Object.getPrototypeOf(n||e));b(r,function(t){"init"==t||f[t]||(f[t]=y(e[t])?e[t].bind(f):e[t])}),e.init&&e.init.bind(f)()}),this}),A(this,"mount",function(){r();var e=Y.mixin(et);if(e)for(var n in e)e.hasOwnProperty(n)&&f.mixin(e[n]);if(t.fn&&t.fn.call(f,l),d(c,f,w),s(!0),t.attrs&&B(t.attrs,function(t,e){O(T,t,e)}),(t.attrs||m)&&d(f.root,f,w),f.parent&&!g||f.update(x),f.trigger("before-mount"),g&&!m)T=c.firstChild;else{for(;c.firstChild;)T.appendChild(c.firstChild);T.stub&&(T=h.root)}A(f,"root",T),g&&p(f.root,f.parent,null,!0),!f.parent||f.parent.isMounted?(f.isMounted=!0,f.trigger("mount")):f.parent.one("mount",function(){K(f.root)||(f.parent.isMounted=f.isMounted=!0,f.trigger("mount"))})}),A(this,"unmount",function(t){var e,n=T,r=n.parentNode,o=W.indexOf(f);if(f.trigger("before-unmount"),~o&&W.splice(o,1),r){if(h)e=k(h),D(e.tags[E])?b(e.tags[E],function(t,n){t._riot_id==f._riot_id&&e.tags[E].splice(n,1)}):e.tags[E]=i;else for(;n.firstChild;)n.removeChild(n.firstChild);t?(C(r,ot),C(r,rt)):r.removeChild(n)}this._virts&&b(this._virts,function(t){t.parentNode&&t.parentNode.removeChild(t)}),f.trigger("unmount"),s(),f.off("*"),f.isMounted=!1,delete T._tag}),p(c,this,_)}function g(t,e,n,r){n[t]=function(t){var i,a=r._parent,u=r._item;if(!u)for(;a&&!u;)u=a._item,a=a._parent;t=t||o.event,H(t,"currentTarget")&&(t.currentTarget=n),H(t,"target")&&(t.target=t.srcElement),H(t,"which")&&(t.which=t.charCode||t.keyCode),t.item=u,e.call(r,t)===!0||/radio|check/.test(n.type)||(t.preventDefault&&t.preventDefault(),t.returnValue=!1),t.preventUpdate||(i=u?k(a):r,i.update())}}function m(t,e,n){t&&(t.insertBefore(n,e),t.removeChild(e))}function v(t,e){b(t,function(t,n){var r=t.dom,o=t.attr,i=gt(t.expr,e),a=t.dom.parentNode;if(t.bool?i=!!i:null==i&&(i=""),t.value!==i){if(t.value=i,!o)return i+="",void(a&&("TEXTAREA"===a.tagName?(a.value=i,pt||(r.nodeValue=i)):r.nodeValue=i));if("value"===o)return void(r.value=i);if(C(r,o),y(i))g(o,i,r,e);else if("if"==o){var u=t.stub,s=function(){m(u.parentNode,u,r)},c=function(){m(r.parentNode,r,u)};i?u&&(s(),r.inStub=!1,K(r)||P(r,function(t){t._tag&&!t._tag.isMounted&&(t._tag.isMounted=!!t._tag.trigger("mount"))})):(u=t.stub=u||document.createTextNode(""),r.parentNode?c():(e.parent||e).one("updated",c),r.inStub=!0)}else"show"===o?r.style.display=i?"":"none":"hide"===o?r.style.display=i?"none":"":t.bool?(r[o]=i,i&&O(r,o,o),dt&&"selected"===o&&"OPTION"===r.tagName&&(r.__riot1374=i)):(0===i||i&&typeof i!==at)&&(Q(o,nt)&&o!=rt&&(o=o.slice(nt.length)),O(r,o,i))}})}function b(t,e){for(var n,r=t?t.length:0,o=0;o<r;o++)n=t[o],null!=n&&e(n,o)===!1&&o--;return t}function y(t){return typeof t===st||!1}function x(t){if(t.outerHTML)return t.outerHTML;var e=q("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}function w(t,e){if(typeof t.innerHTML!=ut)t.innerHTML=e;else{var n=(new DOMParser).parseFromString(e,"application/xml");t.appendChild(t.ownerDocument.importNode(n.documentElement,!0))}}function _(t){return~lt.indexOf(t)}function N(t){return t&&typeof t===at}function C(t,e){t.removeAttribute(e)}function L(t){return t.replace(/-(\w)/g,function(t,e){return e.toUpperCase()})}function T(t,e){return t.getAttribute(e)}function O(t,e,n){t.setAttribute(e,n)}function E(t){return t.tagName&&tt[T(t,ot)||T(t,rt)||t.tagName.toLowerCase()]}function M(t,e,n){var r=n.tags[e];r?(D(r)||r!==t&&(n.tags[e]=[r]),I(n.tags[e],t)||n.tags[e].push(t)):n.tags[e]=t}function R(t,e,n){var r,o=t.parent;o&&(r=o.tags[e],D(r)?r.splice(n,0,r.splice(r.indexOf(t),1)[0]):M(t,e,o))}function S(t,e,n,r){var o=new h(t,e,n),i=$(e.root),a=k(r);return o.parent=a,o._parent=r,M(o,i,a),a!==r&&M(o,i,r),e.root.innerHTML="",o}function k(t){for(var e=t;!E(e.root)&&e.parent;)e=e.parent;return e}function A(t,e,n,r){return Object.defineProperty(t,e,j({value:n,enumerable:!1,writable:!1,configurable:!0},r)),t}function $(t){var e=E(t),n=T(t,"name"),r=n&&!gt.hasExpr(n)?n:e?e.name:t.tagName.toLowerCase();return r}function j(t){for(var e,n=arguments,r=1;r<n.length;++r)if(e=n[r])for(var o in e)H(t,o)&&(t[o]=e[o]);return t}function I(t,e){return~t.indexOf(e)}function D(t){return Array.isArray(t)||t instanceof Array}function H(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return typeof t[e]===ut||n&&n.writable}function F(t){if(!(t instanceof h||t&&typeof t.trigger==st))return t;var e={};for(var n in t)ft.test(n)||(e[n]=t[n]);return e}function P(t,e){if(t){if(e(t)===!1)return;for(t=t.firstChild;t;)P(t,e),t=t.nextSibling}}function B(t,e){for(var n,r=/([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;n=r.exec(t);)e(n[1].toLowerCase(),n[2]||n[3]||n[4])}function K(t){for(;t;){if(t.inStub)return!0;t=t.parentNode}return!1}function q(t,e){return e?document.createElementNS("http://www.w3.org/2000/svg","svg"):document.createElement(t)}function U(t,e){return(e||document).querySelectorAll(t)}function z(t,e){return(e||document).querySelector(t)}function G(t){function e(){}return e.prototype=t,new e}function V(t){return T(t,"id")||T(t,"name")}function Z(t,e,n){var r,o=V(t),i=function(i){I(n,o)||(r=D(i),i?(!r||r&&!I(i,t))&&(r?i.push(t):e[o]=[i,t]):e[o]=t)};o&&(gt.hasExpr(o)?e.one("mount",function(){o=V(t),i(e[o])}):i(e[o]))}function Q(t,e){return t.slice(0,e.length)===e}function X(t,e,n){var r=tt[e],o=t._innerHTML=t._innerHTML||t.innerHTML;return t.innerHTML="",r&&t&&(r=new h(r,{root:t,opts:n},o)),r&&r.mount&&(r.mount(),I(W,r)||W.push(r)),r}var Y={version:"v2.5.0",settings:{}},J=0,W=[],tt={},et="__global_mixin",nt="riot-",rt=nt+"tag",ot="data-is",it="string",at="object",ut="undefined",st="function",ct=/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/,ft=/^(?:_(?:item|id|parent)|update|root|(?:un)?mount|mixin|is(?:Mounted|Loop)|tags|parent|opts|trigger|o(?:n|ff|ne))$/,lt=["altGlyph","animate","animateColor","circle","clipPath","defs","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feFlood","feGaussianBlur","feImage","feMerge","feMorphology","feOffset","feSpecularLighting","feTile","feTurbulence","filter","font","foreignObject","g","glyph","glyphRef","image","line","linearGradient","marker","mask","missing-glyph","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","switch","symbol","text","textPath","tref","tspan","use"],pt=0|(o&&o.document||{}).documentMode,dt=o&&!!o.InstallTrigger;Y.observable=function(t){function e(t,e){for(var n,r,o=t.split(" "),i=o.length,a=0;a<i;a++)n=o[a],r=n.indexOf("."),n&&e(~r?n.substring(0,r):n,a,~r?n.slice(r+1):null)}t=t||{};var n={},r=Array.prototype.slice;return Object.defineProperties(t,{on:{value:function(r,o){return"function"!=typeof o?t:(e(r,function(t,e,r){(n[t]=n[t]||[]).push(o),o.typed=e>0,o.ns=r}),t)},enumerable:!1,writable:!1,configurable:!1},off:{value:function(r,o){return"*"!=r||o?e(r,function(t,e,r){if(o||r)for(var i,a=n[t],u=0;i=a&&a[u];++u)(i==o||r&&i.ns==r)&&a.splice(u--,1);else delete n[t]}):n={},t},enumerable:!1,writable:!1,configurable:!1},one:{value:function(e,n){function r(){t.off(e,r),n.apply(t,arguments)}return t.on(e,r)},enumerable:!1,writable:!1,configurable:!1},trigger:{value:function(o){for(var i,a=arguments.length-1,u=new Array(a),s=0;s<a;s++)u[s]=arguments[s+1];return e(o,function(e,o,a){i=r.call(n[e]||[],0);for(var s,c=0;s=i[c];++c)s.busy||(s.busy=1,a&&s.ns!=a||s.apply(t,s.typed?[e].concat(u):u),i[c]!==s&&c--,s.busy=0);n["*"]&&"*"!=e&&t.trigger.apply(t,["*",e].concat(u))}),t},enumerable:!1,writable:!1,configurable:!1}}),t},function(t){function e(t){return t.split(/[\/?#]/)}function n(t,e){var n=new RegExp("^"+e[C](/\*/g,"([^/?#]+?)")[C](/\.\./,".*")+"$"),r=t.match(n);if(r)return r.slice(1)}function r(t,e){var n;return function(){clearTimeout(n),n=setTimeout(t,e)}}function i(t){h=r(l,1),M[_](L,h),M[_](T,h),R[_]($,p),t&&l(!0)}function a(){this.$=[],t.observable(this),I.on("stop",this.s.bind(this)),I.on("emit",this.e.bind(this))}function u(t){return t[C](/^\/|\/$/,"")}function s(t){return"string"==typeof t}function c(t){return(t||k.href)[C](y,"")}function f(t){return"#"==g[0]?(t||k.href||"").split(g)[1]||"":(k?c(t):t||"")[C](g,"")}function l(t){var e=0==F;if(!(E<=F)&&(F++,H.push(function(){var e=f();(t||e!=m)&&(I[O]("emit",e),m=e)}),e)){for(;H.length;)H[0](),H.shift();F=0}}function p(t){if(!(1!=t.which||t.metaKey||t.ctrlKey||t.shiftKey||t.defaultPrevented)){for(var e=t.target;e&&"A"!=e.nodeName;)e=e.parentNode;!e||"A"!=e.nodeName||e[N]("download")||!e[N]("href")||e.target&&"_self"!=e.target||e.href.indexOf(k.href.match(y)[0])==-1||(e.href==k.href||e.href.split("#")[0]!=k.href.split("#")[0]&&("#"==g||0===c(e.href).indexOf(g))&&d(f(e.href),e.title||R.title))&&t.preventDefault()}}function d(t,e,n){return S?(t=g+u(t),e=e||R.title,n?S.replaceState(null,e,t):S.pushState(null,e,t),R.title=e,D=!1,l(),D):I[O]("emit",f(t))}var h,g,m,v,b,y=/^.+?\/\/+[^\/]+/,x="EventListener",w="remove"+x,_="add"+x,N="hasAttribute",C="replace",L="popstate",T="hashchange",O="trigger",E=3,M="undefined"!=typeof o&&o,R="undefined"!=typeof document&&document,S=M&&history,k=M&&(S.location||M.location),A=a.prototype,$=R&&R.ontouchstart?"touchstart":"click",j=!1,I=t.observable(),D=!1,H=[],F=0;A.m=function(t,e,n){!s(t)||e&&!s(e)?e?this.r(t,e):this.r("@",t):d(t,e,n||!1)},A.s=function(){this.off("*"),this.$=[]},A.e=function(t){this.$.concat("@").some(function(e){var n=("@"==e?v:b)(u(t),u(e));if("undefined"!=typeof n)return this[O].apply(null,[e].concat(n)),D=!0},this)},A.r=function(t,e){"@"!=t&&(t="/"+u(t),this.$.push(t)),this.on(t,e)};var P=new a,B=P.m.bind(P);B.create=function(){var t=new a,e=t.m.bind(t);return e.stop=t.s.bind(t),e},B.base=function(t){g=t||"#",m=f()},B.exec=function(){l(!0)},B.parser=function(t,r){t||r||(v=e,b=n),t&&(v=t),r&&(b=r)},B.query=function(){var t={},e=k.href||m;return e[C](/[?&](.+?)=([^&]*)/g,function(e,n,r){t[n]=r}),t},B.stop=function(){j&&(M&&(M[w](L,h),M[w](T,h),R[w]($,p)),I[O]("stop"),j=!1)},B.start=function(t){j||(M&&("complete"==document.readyState?i(t):M[_]("load",function(){setTimeout(function(){i(t)},1)})),j=!0)},B.base(),B.parser(),t.route=B}(Y);var ht=function(t){function e(t){return t}function n(t,e){return e||(e=v),new RegExp(t.source.replace(/{/g,e[2]).replace(/}/g,e[3]),t.global?c:"")}function r(t){if(t===h)return g;var e=t.split(" ");if(2!==e.length||/[\x00-\x1F<>a-zA-Z0-9'",;\\]/.test(t))throw new Error('Unsupported brackets "'+t+'"');return e=e.concat(t.replace(/(?=[[\]()*+?.^$|])/g,"\\").split(" ")),e[4]=n(e[1].length>1?/{[\S\s]*?}/:g[4],e),e[5]=n(t.length>3?/\\({|})/g:g[5],e),e[6]=n(g[6],e),e[7]=RegExp("\\\\("+e[3]+")|([[({])|("+e[3]+")|"+p,c),e[8]=t,e}function o(t){return t instanceof RegExp?u(t):v[t]}function i(t){(t||(t=h))!==v[8]&&(v=r(t),u=t===h?e:n,v[9]=u(g[9])),m=t}function a(t){var e;t=t||{},e=t.brackets,Object.defineProperty(t,"brackets",{set:i,get:function(){return m},enumerable:!0}),s=t,i(e)}var u,s,c="g",f=/\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g,l=/"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g,p=l.source+"|"+/(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source+"|"+/\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source,d={"(":RegExp("([()])|"+p,c),"[":RegExp("([[\\]])|"+p,c),"{":RegExp("([{}])|"+p,c)},h="{ }",g=["{","}","{","}",/{[^}]*}/,/\\([{}])/g,/\\({)|{/g,RegExp("\\\\(})|([[({])|(})|"+p,c),h,/^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,/(^|[^\\]){=[\S\s]*?}/],m=t,v=[];return o.split=function(t,e,n){function r(t){e||a?c.push(t&&t.replace(n[5],"$1")):c.push(t)}function o(t,e,n){var r,o=d[e];for(o.lastIndex=n,n=1;(r=o.exec(t))&&(!r[1]||(r[1]===e?++n:--n)););return n?t.length:o.lastIndex}n||(n=v);var i,a,u,s,c=[],f=n[6];for(a=u=f.lastIndex=0;i=f.exec(t);){if(s=i.index,a){if(i[2]){f.lastIndex=o(t,i[2],f.lastIndex);continue}if(!i[3])continue}i[1]||(r(t.slice(u,s)),u=f.lastIndex,f=n[6+(a^=1)],f.lastIndex=u)}return t&&u<t.length&&r(t.slice(u)),c},o.hasExpr=function(t){return v[4].test(t)},o.loopKeys=function(t){var e=t.match(v[9]);return e?{key:e[1],pos:e[2],val:v[0]+e[3].trim()+v[1]}:{val:t.trim()}},o.array=function(t){return t?r(t):v},Object.defineProperty(o,"settings",{set:a,get:function(){return s}}),o.settings="undefined"!=typeof Y&&Y.settings||{},o.set=i,o.R_STRINGS=l,o.R_MLCOMMS=f,o.S_QBLOCKS=p,o}(),gt=function(){function t(t,r){return t?(u[t]||(u[t]=n(t))).call(r,e):t}function e(e,n){t.errorHandler&&(e.riotData={tagName:n&&n.root&&n.root.tagName,_riot_id:n&&n._riot_id},t.errorHandler(e))}function n(t){var e=r(t);return"try{return "!==e.slice(0,11)&&(e="return "+e),new Function("E",e+";")}function r(t){var e,n=[],r=ht.split(t.replace(l,'"'),1);if(r.length>2||r[0]){var o,a,u=[];for(o=a=0;o<r.length;++o)e=r[o],e&&(e=1&o?i(e,1,n):'"'+e.replace(/\\/g,"\\\\").replace(/\r\n?|\n/g,"\\n").replace(/"/g,'\\"')+'"')&&(u[a++]=e);e=a<2?u[0]:"["+u.join(",")+'].join("")'}else e=i(r[1],0,n);return n[0]&&(e=e.replace(p,function(t,e){return n[e].replace(/\r/g,"\\r").replace(/\n/g,"\\n")})),e}function i(t,e,n){function r(e,n){var r,o=1,i=d[e];for(i.lastIndex=n.lastIndex;r=i.exec(t);)if(r[0]===e)++o;else if(!--o)break;n.lastIndex=o?t.length:i.lastIndex}if(t=t.replace(f,function(t,e){return t.length>2&&!e?s+(n.push(t)-1)+"~":t}).replace(/\s+/g," ").trim().replace(/\ ?([[\({},?\.:])\ ?/g,"$1")){for(var o,i=[],u=0;t&&(o=t.match(c))&&!o.index;){var l,p,h=/,|([[{(])|$/g;for(t=RegExp.rightContext,l=o[2]?n[o[2]].slice(1,-1).trim().replace(/\s+/g," "):o[1];p=(o=h.exec(t))[1];)r(p,h);p=t.slice(0,o.index),t=RegExp.rightContext,i[u++]=a(p,1,l)}t=u?u>1?"["+i.join(",")+'].join(" ").trim()':i[0]:a(t,e)}return t}function a(t,e,n){var r;return t=t.replace(g,function(t,e,n,o,i){return n&&(o=r?0:o+t.length,"this"!==n&&"global"!==n&&"window"!==n?(t=e+'("'+n+h+n,o&&(r="."===(i=i[o])||"("===i||"["===i)):o&&(r=!m.test(i.slice(o)))),t}),r&&(t="try{return "+t+"}catch(e){E(e,this)}"),n?t=(r?"function(){"+t+"}.call(this)":"("+t+")")+'?"'+n+'":""':e&&(t="function(v){"+(r?t.replace("return ","v="):"v=("+t+")")+';return v||v===0?v:""}.call(this)'),t}var u={};t.haveRaw=ht.hasRaw,t.hasExpr=ht.hasExpr,t.loopKeys=ht.loopKeys,t.errorHandler=null;var s="⁗",c=/^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/,f=RegExp(ht.S_QBLOCKS,"g"),l=/\u2057/g,p=/\u2057(\d+)~/g,d={"(":/[()]/g,"[":/[[\]]/g,"{":/[{}]/g},h='"in this?this:'+("object"!=typeof o?"global":"window")+").",g=/[,{][$\w]+:|(^ *|[^$\w\.])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g,m=/^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;return t.parse=function(t){return t},t.version=ht.version="v2.4.0",t}(),mt=function t(){function t(t,r){var o=t&&t.match(/^\s*<([-\w]+)/),i=o&&o[1].toLowerCase(),a=q("div",_(i));return t=n(t,r),s.test(i)?a=e(a,t,i):w(a,t),a.stub=!0,a}function e(t,e,n){var r="o"===n[0],o=r?"select>":"table>";if(t.innerHTML="<"+o+e.trim()+"</"+o,o=t.firstChild,r)o.selectedIndex=-1;else{var i=u[n];i&&1===o.childElementCount&&(o=z(i,o))}return o}function n(t,e){if(!r.test(t))return t;var n={};return e=e&&e.replace(i,function(t,e,r){return n[e]=n[e]||r,""}).trim(),t.replace(a,function(t,e,r){return n[e]||r||""}).replace(o,function(t,n){return e||n||""})}var r=/<yield\b/i,o=/<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi,i=/<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi,a=/<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi,u={tr:"tbody",th:"tr",td:"tr",col:"colgroup"},s=pt&&pt<10?ct:/^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;return t}(),vt=function(t){if(!o)return{add:function(){},inject:function(){}};var e=function(){var t=q("style");O(t,"type","text/css");var e=z("style[type=riot]");return e?(e.id&&(t.id=e.id),e.parentNode.replaceChild(t,e)):document.getElementsByTagName("head")[0].appendChild(t),t}(),n=e.styleSheet,r="";return Object.defineProperty(t,"styleNode",{value:e,writable:!0}),{add:function(t){r+=t},inject:function(){r&&(n?n.cssText+=r:e.innerHTML+=r,r="")}}}(Y),bt=function(t){var e=t.requestAnimationFrame||t.mozRequestAnimationFrame||t.webkitRequestAnimationFrame;if(!e||/iP(ad|hone|od).*OS 6/.test(t.navigator.userAgent)){var n=0;e=function(t){var e=Date.now(),r=Math.max(16-(e-n),0);setTimeout(function(){t(n=e+r)},r)}}return e}(o||{});Y.util={brackets:ht,tmpl:gt},Y.mixin=function(){var t={},e=t[et]={},n=0;return function(r,o,i){if(N(r))return void Y.mixin("__unnamed_"+n++,r,!0);var a=i?e:t;if(!o){if(typeof a[r]===ut)throw new Error("Unregistered mixin: "+r);return a[r]}y(o)?(j(o.prototype,a[r]||{}),a[r]=o):a[r]=j(a[r]||{},o)}}(),Y.tag=function(t,e,n,r,o){return y(r)&&(o=r,/^[\w\-]+\s?=/.test(n)?(r=n,n=""):r=""),n&&(y(n)?o=n:vt.add(n)),t=t.toLowerCase(),tt[t]={name:t,tmpl:e,attrs:r,fn:o},t},Y.tag2=function(t,e,n,r,o){return n&&vt.add(n),tt[t]={name:t,tmpl:e,attrs:r,fn:o},t},Y.mount=function(t,e,n){function r(t){var e="";return b(t,function(t){/[^-\w]/.test(t)||(t=t.trim().toLowerCase(),e+=",["+ot+'="'+t+'"],['+rt+'="'+t+'"]')}),e}function o(){var t=Object.keys(tt);return t+r(t)}function i(t){if(t.tagName){var r=T(t,ot)||T(t,rt);e&&r!==e&&(r=e,O(t,ot,e),O(t,rt,e));var o=X(t,r||t.tagName.toLowerCase(),n);o&&s.push(o)}else t.length&&b(t,i)}var a,u,s=[];if(vt.inject(),N(e)&&(n=e,e=0),typeof t===it?("*"===t?t=u=o():t+=r(t.split(/, */)),a=t?U(t):[]):a=t,"*"===e){if(e=u||o(),a.tagName)a=U(e,a);else{var c=[];b(a,function(t){c.push(U(e,t))}),a=c}e=0}return i(a),s},Y.update=function(){return b(W,function(t){t.update()})},Y.vdom=W,Y.Tag=h,typeof e===at?t.exports=Y:"function"===st&&typeof n(3)!==ut?(r=function(){return Y}.call(e,n,e,t),!(r!==i&&(t.exports=r))):o.riot=Y}("undefined"!=typeof window?window:void 0)},function(t,e){(function(e){t.exports=e}).call(e,{})},function(t,e,n){(function(t){"use strict";var e=n(5);t.tag2("name",'<h1>Name {name} {opts.last}, {opts.first} : {count}</h1> <foo> <button onclick="{click}">Count</button>',"","",function(t){var n=this;this.name=e.name,this.count=0,this.click=function(){n.count++}}),t.tag2("foo","<h2>required {name}</h2>","","",function(t){var e=n(5);this.name=e.name})}).call(e,n(2))},function(t,e){"use strict";t.exports={name:"this is an imported module"}},function(t,e,n){(function(t){"use strict";t.tag2("loan",'<h3>Loan {name}</h3> <input type="text" placeholder="Name" value="{loan.title}" onchange="{refresh}"> <input value="{loan.amount}" onchange="{refresh}" type="{\'number\'}">',"","",function(t){var e=this;this.loan=this.opts.loan,this.refresh=function(){e.update()}}),t.tag2("loans",'<h2>{title}</h2> <button onclick="{add}">Add</button> <loan each="{loan in loans}" loan="{loan}"></loan>',"","",function(t){var e=this;this.add=function(){e.loans.unshift({})},this.loans=[],this.title="Loans"}),t.tag2("application","<h1>{title}</h1> <loans></loans> <h1>{foo()}</h1>","","",function(t){this.title="Consolidate",this.foo=function(){return"bar"}}),t.tag2("debt-list",'<h1>Debts</h1> <div each="{debt in debts}"> <card heading="{debt.name}"> <h3>Amount: ${debt.remaining}</h3> <input onkeyup="{updateName.bind(debt)}" value="{debt.name}" placeholder="Name" type="text"> </input> <input onkeyup="{updateOutsanding.bind(debt)}" value="{debt.remaining}" placeholder="outstanding debt (in dollars)" step="0.01" min="0.01" type="{\'number\'}"> <div prefix>$&nbsp;</div> </input> <div>Use repayments? {debt.useRepayments}</div> <input type="checkbox" onchange="{toggleRepayments.bind(null, debt)}">Use Repayments</input> <listbox> <div each="{repayment in debt.repayments}"> <item>{repayment}</item> </div> </listbox> <button onclick="{addRepayment}">Add Repayment</button> <button onclick="{remove}">Remove Debt</button> </card> </template> <div> <button onclick="{add}">Add New Debt</button> </div>',":host { display: block; padding: 16px; }","",function(t){var e=this;this.updateOutsanding=function(t){e.remaining=parseFloat(t.target.value),e.update()},this.updateName=function(t){e.name=t.target.value,e.update()};var n=0,r=0;this.total=r,this.debts=[{name:"Fake Debt",remaining:n,useRepayments:!0,repayments:[]}],this.toggleRepayments=function(t){t.useRepayments=!t.useRepayments,e.update()},this.add=function(){var t;e.debts.push((t={name:"Debt",remaining:0,repayments:["foo","bar","baz"],useRepayments:!0},t.remaining=n,t)),e.update()},this.remove=function(t){e.debts.splice(t.model.index,1),e.update()},this.on("update",function(){e.total=e.debts.reduce(function(t,e){return t+(parseInt(e.remaining,10)||n)},r)})})}).call(e,n(2))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,